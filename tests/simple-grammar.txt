
module
    : ( module_item )+
    ;

module_item
    : namespace_item
    | import_statement
    | start_definition
    ;

start_definition
    : 'start' function_body
    ;

import_statement
    : 'import' IDENT ('as' IDENT)?
    ;

namespace_item
    : scope_operator
    | namespace_definition
    | class_definition
    | function_definition
    | create_definition
    | destroy_definition
    | var_definition
    ;

scope_operator
    : 'private'
    | 'public'
    | 'protected'
    ;

literal_type_name
    : 'float'
    | 'integer'
    | 'string'
    | 'boolean'
    | 'nothing'
    | 'list'
    | 'dict'
    ;

type_name
    : literal_type_name
    | compound_name
    ;

type_name_list
    : '(' ( type_name (',' type_name )* )? ')'
    ;

formatted_strg
    : LITERAL_DSTR ( expression_list )?
    ;

string_literal
    : LITERAL_SSTR
    | formatted_strg
    ;

literal_value
    : LITERAL_FLOAT
    | LITERAL_INTEGER
    | LITERAL_BOOL
    | string_literal
    ;

var_decl
    : type_name IDENT
    ;

var_decl_list
    : '(' ( var_decl ( ',' var_decl )* )? ')'
    ;

function_declaration
    : compound_reference type_name_list type_name_list
    ;

assignment_item
    : expression
    | list_init
    | function_declaration
    ;

var_definition
    : ( 'const' )? var_decl ( '=' assignment_item )?
    ;

list_init_str
    : LITERAL_DSTR
    | LITERAL_SSTR
    ;

list_init_element
    : list_init_str ':' assignment_item
    | assignment_item
    ;

list_init
    : '[' list_init_element ( ',' list_init_element )* ']'
    ;

array_param_item
    : expression
    | string_literal
    ;

array_param
    : '[' array_param_item ']'
    ;

array_param_list
    : array_param (array_param)*
    ;

array_reference
    : IDENT array_param_list
    ;

function_reference
    : compound_reference expression_list compound_name_list
    ;

create_reference
    : create_name expression_list
    ;

destroy_reference
    : destroy_name
    ;

compound_name
    : IDENT ( '.' IDENT )*
    ;

compound_name_list
    : '(' ( compound_name (',' compound_name )* )? ')'
    ;

compound_ref_item
    : IDENT
    | array_reference
    ;

compound_reference
    : compound_ref_item ( '.' compound_ref_item )*
    ;

cast_statement
    : type_name ':' expression
    ;

expression
    : expr_or
    ;

expr_or
    : expr_and
    | OR expr_and
    ;

expr_and
    : expr_equality
    | AND expr_equality
    ;

expr_equality
    : expr_compare
    | EQUALS expr_compare
    | NOTEQUALS expr_compare
    ;

expr_compare
    : expr_term
    | LESS_THAN expr_term
    | GREATER_THAN expr_term
    | LESS_OR_EQUAL expr_term
    | GREATER_OR_EQUAL expr_term
    ;

expr_term
    : expr_factor
    | PLUS expr_factor
    | MINUS expr_factor
    ;

expr_factor
    : expr_unary
    | STAR expr_unary
    | SLASH expr_unary
    | PERCENT expr_unary
    ;

expr_unary
    : expr_primary
    | MINUS expr_primary
    | BANG expr_primary
    ;

expr_primary
    : literal_value
    | compound_reference
    | cast_statement
    | '(' expression ')'
    ;

expression_list
    : '(' (expression ( ',' expression )*)? ')'
    ;

namespace_definition
    : 'namespace' IDENT '{' ( namespace_item )+ '}'
    ;

class_definition
    : 'class' IDENT ( '(' ( type_name )? ')' )?
        '{' ( class_item )+ '}'
    ;

class_item
    : scope_operator
    | var_decl
    | function_declaration
    | create_declaration
    | destroy_declaration
    ;

function_declaration
    : ('virtual' )? IDENT type_name_list type_name_list
    ;

create_declaration
    : ('virtual' )? 'create' type_name_list
    ;

destroy_declaration
    : ('virtual' )? 'destroy'
    ;

function_definition
    : ('virtual' )? compound_name var_decl_list var_decl_list function_body
    ;

create_name
    : IDENT ('.' IDENT)? '.' 'create'
    ;

create_definition
    : ('virtual' )? create_name var_decl_list function_body
    ;

destroy_name
    : IDENT ('.' IDENT)? '.' 'destroy'
    ;

destroy_definition
    : ('virtual' )? destroy_name function_body
    ;


function_body
    : '{' ( function_body_element )* '}'
    ;

assign_eq_item
    : assignment_item
    | compound_reference
    ;

assign_inc_item
    : expression
    | string_literal
    ;

assignment
    : compound_reference EQUAL assign_eq_item
    | compound_reference PLUS_EQUAL assign_inc_item
    | compound_reference MINUS_EQUAL expression
    | compound_reference STAR_EQUAL expression
    | compound_reference SLASH_EQUAL expression
    | compound_reference PERCENT_EQUAL expression
    ;

function_body_element
    : var_definition
    | function_reference
    | create_reference
    | destroy_reference
    | assignment
    | while_clause
    | do_clause
    | for_clause
    | if_clause
    | try_clause
    | switch_clause
    | break_statement
    | continue_statement
    | INLINE
    | yield_statement
    | type_statement
    | return_statement
    | raise_statement
    | trace_statement
    | print_statement
    | function_body
    ;

break_statement
    : 'break'
    ;

continue_statement
    : 'continue'
    ;

yield_statement
    : 'yield' '(' compound_reference ')'
    ;

type_statement
    : 'type' '(' compound_reference ')'
    ;

return_statement
    : 'return'
    ;

raise_statement
    : 'raise' '(' IDENT ',' string_literal ')'
    ;

trace_statement
    : 'trace' '(' string_literal ')'
    ;

print_statement
    : 'print' ( expression_list )?
    ;

exit_statement
    : 'exit' '(' expression ')'
    ;

while_definition
    : 'while' ( '(' ( expression )? ')' )?
    ;

while_clause
    : while_definition function_body
    ;

do_clause
    : 'do' function_body while_definition
    ;

for_clause
    : 'for' ( '(' ( (type_name)? IDENT 'in' expression )? ')' )? function_body
    ;

if_clause
    : 'if' '(' expression ')' function_body ( else_clause )* ( final_else_clause )?
    ;

else_clause
    : 'else' '(' expression ')' function_body
    ;

final_else_clause
    : 'else' ( '(' ')' )? function_body
    ;

try_clause
    : 'try' function_body ( except_clause )* ( final_clause )?
    ;

except_clause
    : 'except' '(' IDENT ',' IDENT ')' function_body
    ;

final_clause
    : 'final' '(' IDENT ')' function_body
    ;
